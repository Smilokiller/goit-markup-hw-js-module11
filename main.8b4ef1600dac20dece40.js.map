{"version":3,"sources":["webpack:///./index.js"],"names":["start","document","querySelector","stop","body","colors","randomColorStart","addEventListener","setAttribute","setInterval","style","backgroundColor","Math","round","random","length","removeAttribute","clearInterval","daysRefs","hoursRefs","minsRefs","secondsRefs","targetDate","dateNow","time","Date","now","getTime","days","hours","mins","secs","textContent","timerAdd","floor"],"mappings":"kHAAA,qBAGMA,EAAQC,SAASC,cAAc,yBAC/BC,EAAOF,SAASC,cAAc,wBAC9BE,EAAOH,SAASC,cAAc,QAE9BG,EAAS,CACX,UACA,UACA,UACA,UACA,UACA,WAOAC,EAAmB,KACvBN,EAAMO,iBAAiB,SAAS,WAC5BP,EAAMQ,aAAa,WAAY,YAC/BF,EAAmBG,aAAY,WAC3BL,EAAKM,MAAMC,gBAAX,GAAgCN,EARzB,SAASA,GACpB,OAAOO,KAAKC,MAAMD,KAAKE,UAAYT,EAAS,IAODS,CAAOT,EAAOU,WACtD,QAEPZ,EAAKI,iBAAiB,SAAS,WAC3BP,EAAMgB,gBAAgB,YACtBC,cAAcX,MAKlB,IAAMY,EAAWjB,SAASC,cAAc,uBAClCiB,EAAYlB,SAASC,cAAc,wBACnCkB,EAAWnB,SAASC,cAAc,uBAClCmB,EAAcpB,SAASC,cAAc,uBAiBvCO,aAAY,WACR,IAfEa,EACAC,EAcIC,GAfJF,EAAa,IAAIG,KAAK,gBACtBF,EAAUE,KAAKC,MACRJ,EAAWK,UAAYJ,IAIvB,SAASK,EAAMC,EAAOC,EAAMC,GACzCb,EAASc,YAAcJ,EACvBT,EAAUa,YAAcH,EACxBT,EAASY,YAAcF,EACvBT,EAAYW,YAAcD,EAUtBE,CAJarB,KAAKsB,MAAMV,EAAO,OACjBZ,KAAKsB,MAAOV,EAAO,MAAR,MACZZ,KAAKsB,MAAOV,EAAO,KAAR,KACXZ,KAAKsB,MAAOV,EAAO,IAAe,QAEhD,O","file":"main.8b4ef1600dac20dece40.js","sourcesContent":["import './styles.css';\n\n//  1 task\nconst start = document.querySelector('[data-action=\"start\"]');\nconst stop = document.querySelector('[data-action=\"stop\"]');\nconst body = document.querySelector('body');\n\nconst colors = [\n    '#FFFFFF',\n    '#2196F3',\n    '#4CAF50',\n    '#FF9800',\n    '#009688',\n    '#795548',\n];\n\nconst random = function(colors) {\n    return Math.round(Math.random() * (colors - 0));\n}\n\nlet randomColorStart = null;\nstart.addEventListener('click', () => {\n    start.setAttribute(\"disabled\", \"disabled\");\n    randomColorStart = setInterval(() => {\n        body.style.backgroundColor = `${colors[random(colors.length)]}`\n    }, 1000)\n});\nstop.addEventListener('click', () => {\n    start.removeAttribute(\"disabled\");\n    clearInterval(randomColorStart);\n})\n\n// 2 task\n\nconst daysRefs = document.querySelector('[data-value=\"days\"]');\nconst hoursRefs = document.querySelector('[data-value=\"hours\"]');\nconst minsRefs = document.querySelector('[data-value=\"mins\"]');\nconst secondsRefs = document.querySelector('[data-value=\"secs\"]');\n\nconst timeFind = function() {\n    const targetDate = new Date('Sep 17, 2020');\n    const dateNow = Date.now();\n    const time = targetDate.getTime() - dateNow;\n    return time;\n}\n\nconst timerAdd = function(days, hours, mins, secs) {\n    daysRefs.textContent = days;\n    hoursRefs.textContent = hours;\n    minsRefs.textContent = mins;\n    secondsRefs.textContent = secs;\n}\n\nconst timer = function() {\n    setInterval(() => {\n        const time = timeFind();\n        const days = Math.floor(time / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n        const secs = Math.floor((time % (1000 * 60)) / 1000);\n        timerAdd(days, hours, mins, secs);\n    }, 1000);\n}\ntimer();\n\n\n\n\n// 3 task\n\n\n// const delay = ms => {\n//     const promise = new Promise((resolve, reject) => {\n\n//         setTimeout(() => {\n//             resolve(ms);\n//         }, ms);\n//     });\n//     return promise;\n// };\n\n// const logger = time => console.log(`Resolved after ${time}ms`);\n\n// // Вызовы функции для проверки\n// delay(2000).then(logger); // Resolved after 2000ms\n// delay(1000).then(logger); // Resolved after 1000ms\n// delay(1500).then(logger); // Resolved after 1500ms\n\n// --------------------------------------------------------------------------------\n\n// const users = [\n//     { name: 'Mango', active: true },\n//     { name: 'Poly', active: false },\n//     { name: 'Ajax', active: true },\n//     { name: 'Lux', active: false },\n// ];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//     const promice = new Promise((resolve, reject) => {\n//         const updatedUsers = allUsers.map(user =>\n//             user.name === userName ? {...user, active: !user.active } : user,\n//         );\n//         resolve(updatedUsers);\n//     });\n//     return promice;\n// };\n\n// const logger = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Сейчас работает так\n//  */\n// // toggleUserState(users, 'Mango', logger);\n// // toggleUserState(users, 'Lux', logger);\n\n// /*\n//  * Должно работать так\n//  */\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);\n\n// --------------------------------------------------------------------------------\n\n\n// const randomIntegerFromInterval = (min, max) => {\n//     return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//     const delay = randomIntegerFromInterval(200, 500);\n//     const promice = new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             const canProcess = Math.random() > 0.3;\n\n//             if (canProcess) {\n\n//                 resolve(transaction)\n//             } else {\n//                 // const errror = onError(transaction.id);\n//                 reject(transaction.id)\n//             }\n//         }, delay);\n//     })\n//     return promice;\n\n// };\n\n// const logSuccess = ({ id, amount }) => {\n//     console.log(`Transaction ${id} processed in ${amount}ms`);\n// };\n\n// const logError = id => {\n//     console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// /*\n//  * Работает так\n//  */\n// // makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// // makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// // makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// // makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n// /*\n//  * Должно работать так\n//  */\n// makeTransaction({ id: 70, amount: 150 })\n//     .then(logSuccess)\n//     .catch(logError);\n\n// makeTransaction({ id: 71, amount: 230 })\n//     .then(logSuccess)\n//     .catch(logError);\n\n// makeTransaction({ id: 72, amount: 75 })\n//     .then(logSuccess)\n//     .catch(logError);\n\n// makeTransaction({ id: 73, amount: 100 })\n//     .then(logSuccess)\n//     .catch(logError);"],"sourceRoot":""}