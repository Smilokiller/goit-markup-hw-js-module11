{"version":3,"sources":["webpack:///./index.js"],"names":["start","document","querySelector","stop","body","colors","randomColorStart","addEventListener","setAttribute","setInterval","style","backgroundColor","Math","round","random","length","removeAttribute","clearInterval","daysRefs","hoursRefs","minsRefs","secondsRefs","targetDate","Date","dateNow","now","time","getTime","days","floor","hours","mins","secs","textContent","makeTransaction","transaction","onSuccess","onError","min","max","delay","promice","Promise","resolve","reject","setTimeout","console","log","id","logSuccess","obj","amount","logError","warn","then","catch"],"mappings":"kHAAA,iCAGMA,EAAQC,SAASC,cAAc,yBAC/BC,EAAOF,SAASC,cAAc,wBAC9BE,EAAOH,SAASC,cAAc,QAE9BG,EAAS,CACX,UACA,UACA,UACA,UACA,UACA,WAOAC,EAAmB,KACvBN,EAAMO,iBAAiB,SAAS,WAC5BP,EAAMQ,aAAa,WAAY,YAC/BF,EAAmBG,aAAY,WAC3BL,EAAKM,MAAMC,gBAAX,GAAgCN,EARzB,SAASA,GACpB,OAAOO,KAAKC,MAAMD,KAAKE,UAAYT,EAAS,IAODS,CAAOT,EAAOU,WACtD,QAEPZ,EAAKI,iBAAiB,SAAS,WAC3BP,EAAMgB,gBAAgB,YACtBC,cAAcX,MAKlB,IAAMY,EAAWjB,SAASC,cAAc,uBAClCiB,EAAYlB,SAASC,cAAc,wBACnCkB,EAAWnB,SAASC,cAAc,uBAClCmB,EAAcpB,SAASC,cAAc,uBAOvCO,aAAY,WACR,IAAMa,EAAa,IAAIC,KAAK,gBACtBC,EAAUD,KAAKE,MACfC,EAAOJ,EAAWK,UAAYH,EAC9BI,EAAOhB,KAAKiB,MAAMH,EAAO,OACzBI,EAAQlB,KAAKiB,MAAOH,EAAO,MAAR,MACnBK,EAAOnB,KAAKiB,MAAOH,EAAO,KAAR,KAClBM,EAAOpB,KAAKiB,MAAOH,EAAO,IAAe,KAC/CR,EAASe,YAAcL,EACvBT,EAAUc,YAAcH,EACxBV,EAASa,YAAcF,EACvBV,EAAYY,YAAcD,IAC3B,KA4DP,IAIME,EAAkB,SAACC,EAAaC,EAAWC,GAC7C,IAL+BC,EAAKC,EAK9BC,GALyBF,EAKS,IALJC,EAKS,IAJtC3B,KAAKiB,MAAMjB,KAAKE,UAAYyB,EAAMD,EAAM,GAAKA,IAK9CG,EAAU,IAAIC,WAAQ,SAACC,EAASC,GAClCC,YAAW,WACYjC,KAAKE,SAAW,IAI/BgC,QAAQC,IAAIZ,GACZQ,EAAQR,IAGRS,EAAOT,EAAYa,MAExBR,MAGP,OADAM,QAAQC,IAAIN,GACLA,GAILQ,EAAa,SAACC,GAChBJ,QAAQC,IAAR,eAA2BG,EAAIF,GAA/B,iBAAkDE,EAAIC,OAAtD,OAGEC,EAAW,SAAAJ,GACbF,QAAQO,KAAR,gCAA6CL,EAA7C,8BAaJd,EAAgB,CAAEc,GAAI,GAAIG,OAAQ,MAC7BG,KAAKL,GACLM,MAAMH,GAEXlB,EAAgB,CAAEc,GAAI,GAAIG,OAAQ,MAC7BG,KAAKL,GACLM,MAAMH,GAEXlB,EAAgB,CAAEc,GAAI,GAAIG,OAAQ,KAC7BG,KAAKL,GACLM,MAAMH,GAEXlB,EAAgB,CAAEc,GAAI,GAAIG,OAAQ,MAC7BG,KAAKL,GACLM,MAAMH,K","file":"main.bfa4bb4520595cb39d58.js","sourcesContent":["import './styles.css';\nimport { Promise } from 'core-js';\n//  1 task\nconst start = document.querySelector('[data-action=\"start\"]');\nconst stop = document.querySelector('[data-action=\"stop\"]');\nconst body = document.querySelector('body');\n\nconst colors = [\n    '#FFFFFF',\n    '#2196F3',\n    '#4CAF50',\n    '#FF9800',\n    '#009688',\n    '#795548',\n];\n\nconst random = function(colors) {\n    return Math.round(Math.random() * (colors - 0));\n}\n\nlet randomColorStart = null;\nstart.addEventListener('click', () => {\n    start.setAttribute(\"disabled\", \"disabled\");\n    randomColorStart = setInterval(() => {\n        body.style.backgroundColor = `${colors[random(colors.length)]}`\n    }, 1000)\n});\nstop.addEventListener('click', () => {\n    start.removeAttribute(\"disabled\");\n    clearInterval(randomColorStart);\n})\n\n// 2 task\n\nconst daysRefs = document.querySelector('[data-value=\"days\"]');\nconst hoursRefs = document.querySelector('[data-value=\"hours\"]');\nconst minsRefs = document.querySelector('[data-value=\"mins\"]');\nconst secondsRefs = document.querySelector('[data-value=\"secs\"]');\n\n// const countdownTimer = new CountdownTimer({\n//     selector: '#timer-1',\n//     targetDate: new Date('Sep 17, 2020'),\n// });\nconst timer = function() {\n    setInterval(() => {\n        const targetDate = new Date('Sep 17, 2020');\n        const dateNow = Date.now();\n        const time = targetDate.getTime() - dateNow;\n        const days = Math.floor(time / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n        const secs = Math.floor((time % (1000 * 60)) / 1000);\n        daysRefs.textContent = days;\n        hoursRefs.textContent = hours;\n        minsRefs.textContent = mins;\n        secondsRefs.textContent = secs;\n    }, 1000);\n}\ntimer();\n\n// 3 task\n\n\n// const delay = ms => {\n//     const promise = new Promise((resolve, reject) => {\n\n//         setTimeout(() => {\n//             resolve(ms);\n//         }, ms);\n//     });\n//     return promise;\n// };\n\n// const logger = time => console.log(`Resolved after ${time}ms`);\n\n// // Вызовы функции для проверки\n// delay(2000).then(logger); // Resolved after 2000ms\n// delay(1000).then(logger); // Resolved after 1000ms\n// delay(1500).then(logger); // Resolved after 1500ms\n\n// --------------------------------------------------------------------------------\n\n// const users = [\n//     { name: 'Mango', active: true },\n//     { name: 'Poly', active: false },\n//     { name: 'Ajax', active: true },\n//     { name: 'Lux', active: false },\n// ];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//     const promice = new Promise((resolve, reject) => {\n//         const updatedUsers = allUsers.map(user =>\n//             user.name === userName ? {...user, active: !user.active } : user,\n//         );\n//         resolve(updatedUsers);\n//     });\n//     return promice;\n// };\n\n// const logger = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Сейчас работает так\n//  */\n// // toggleUserState(users, 'Mango', logger);\n// // toggleUserState(users, 'Lux', logger);\n\n// /*\n//  * Должно работать так\n//  */\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);\n\n// --------------------------------------------------------------------------------\n\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    const promice = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                const [] = transaction\n                console.log(transaction)\n                resolve(transaction)\n            } else {\n                // const errror = onError(transaction.id);\n                reject(transaction.id)\n            }\n        }, delay);\n    })\n    console.log(promice)\n    return promice;\n\n};\n\nconst logSuccess = (obj) => {\n    console.log(`Transaction ${obj.id} processed in ${obj.amount}ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);"],"sourceRoot":""}